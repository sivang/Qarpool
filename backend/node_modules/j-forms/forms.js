var Class = require('sji')
    ,_ = require('underscore')
    ,fields = require('./fields')
    ,widgets = require('./widgets')
    ,common = require('./common'),
    mongoose = require('mongoose');
    mongoose_types = require('./mongoose-types');

mongoose_types.loadTypes(mongoose);

var async = require('async');

var Models = {};

exports.set_models = function(models)
{
    Models = models;
};

exports.checkDependecies = function(model,id,callback)
{
    var models_to_query = {};
    for(var modelName in Models)
    {
        var model_ref = Models[modelName];
        if(!model_ref)
            continue;
        if(!model_ref.schema)
            continue;
        for(var fieldName in model_ref.schema.paths)
        {
            if(model_ref.schema.paths[fieldName].options.ref && model_ref.schema.paths[fieldName].options.ref == model)
            {
                models_to_query[modelName] = models_to_query[modelName] || [];
                var query_dict = {};
                query_dict[fieldName] = id;
                models_to_query[modelName].push(query_dict);
            }
        }
    }
    var funcs = [];
    function query_func(modelName)
    {
        return function(cbk)
        {
            Models[modelName].find({$or:models_to_query[modelName]},cbk);
        }
    }
    for(var modelName in models_to_query)
    {
        funcs.push(query_func(modelName));
    }
    async.parallel(funcs,function(err,results)
    {
       var all_results = [];
        for(var i=0; i<results.length; i++)
        {
            if(results[i] && results[i].length)
            {
                all_results = all_results.concat(results[i]);
            }
        }
        callback(err,all_results);
    });
};

var BaseForm = exports.BaseForm = Class.extend({
    init: function(request,options) {
        this.fields = {};
        options = options || {};
        this.data = options.data || request.body || {};
        this.files = options.files || request.files || {};
        this.exclude = options.exclude || [];
        this.instance = options.instance;
        this.request = request;
        this._fields_ready = false;
        this.fieldsets = null;
        this.errors = {};
        this.static = options.static || {};
        this.static['js'] = this.static['js'] || [];
        this.static['css'] = this.static['css'] || [];
        this.static['js'].push('http://ajax.googleapis.com/ajax/libs/jquery/1.5.1/jquery.min.js');
        this.static['js'].push('/node-forms/js/forms.js');
//        this.static['js'].push('/node-forms/js/jquery-ui-1.8.18.custom.min.js');
 //       this.static['js'].push('/node-forms/js/jquery-ui-timepicker-addon.js');
 //       this.static['js'].push('https://maps-api-ssl.google.com/maps/api/js?v=3&sensor=false&language=he&libraries=places');
 //       this.static['js'].push('/node-forms/js/maps.js');
//        this.static['css'].push('/node-forms/css/ui-lightness/jquery-ui-1.8.18.custom.css');
//        this.static['css'].push('/node-forms/css/forms.css');
        this.handle_empty = options.empty;
        this.handle_success = options.success;
        this.handle_error = options.error;
        var self = this;
        if(request.method.toUpperCase() == 'GET' && this.handle_empty)
        {
            self.render_ready(function(err)
            {
                self.handle_empty(err);
            });
        }
        if(request.method.toUpperCase() == 'POST' && this.handle_success && this.handle_error)
        {
            function on_error(error)
            {
                self.render_ready(function(err)
                {
                    self.handle_error(err || error);
                });
            }
            self.is_valid(function(err,valid)
            {
                if(err || !valid)
                    on_error(err);
                else
                {
                    self.save(function(err,result)
                    {
                        if(err)
                            on_error(err);
                        else
                            self.handle_success(null,result);
                    });
                }
            });
        }
    },
    get_static: function()
    {
        var self = this;
        _.each(this.fields,function(field,fieldname)
        {
            var static = field.get_static();
            if(static.js.length)
                self.static.js = _.union(self.static.js,static.js);
            if(static.css.length)
                self.static.css = _.union(self.static.css,static.css);
        });
    },
    render_head : function(res)
    {
        var self = this;
        self.get_static();
        return common.writer_to_string(function(res)
        {
            if(!self.static)
                return;
            if(self.static['js'])
                for(var i=0; i<self.static['js'].length; i++)
                    res.write('<script src="' + self.static['js'][i] + '"></script>')
            if(self.static['css'])
                for(var i=0; i<self.static['css'].length; i++)
                    res.write('<link type="text/css" href="' + self.static['css'][i] + '" rel="stylesheet">');
        },1000);
    },
    get_fields : function()
    {
        var self = this;
        for(var attr in self)
        {
            if(self[attr] instanceof fields.BaseField)
            {
                self.fields[attr] = self[attr];
            }
        }
        var all_fields = self.fields;
        self.fields = {};
        _.each(all_fields,function(field,name)
        {
            if(_.indexOf(self.exclude,name) == -1)
                self.fields[name] = field;
        });
    },
    get_value : function(field_name)
    {
        return this.data[field_name];
    },
    init_fields : function(req)
    {
        this.get_fields();
        for(var field_name in this.fields)
        {
            var value = this.get_value(field_name);
            this.fields[field_name].set(value,this.request).name = field_name;
        }
        this._fields_ready = true;
    },
    save : function(callback)
    {
        if(!this._fields_ready)
            this.init_fields();
        // not implemented
        if(!this.errors)
            this.is_valid();
        if(Object.keys(this.errors) > 0)
            callback({message:'form did not validate'});
        else
            this.actual_save(callback);
    },
    actual_save : function(callback)
    {
        callback({message:'not implmeneted'});
    },
    is_valid : function(callback)
    {
        var self = this;
        if(!self._fields_ready)
            self.init_fields();
        self.errors = {};
        self.clean_values = {};
        var clean_funcs = [];
        function create_clean_func(field_name)
        {
            return function(cbk)
            {
                self.fields[field_name].clean_value(self.request,function(err)
                {
                    if(err)
                        callback(err);
                    else
                    {
                        if(self.fields[field_name].errors && self.fields[field_name].errors.length)
                            self.errors[field_name] = self.fields[field_name].errors;
                        else
                            self.clean_values[field_name] = self.fields[field_name].value;
                        cbk(null);
                    }
                });
            };
        }
        for(var field_name in self.fields)
        {
            clean_funcs.push(create_clean_func(field_name));
        }
        async.parallel(clean_funcs,function(err,results)
        {
           if(err)
             callback(err);
           else
              callback(null,Object.keys(self.errors).length == 0);
        });
    },
    render_ready : function(callback)
    {
        if(!this._fields_ready)
            this.init_fields();
        var funcs = [];
        var self = this;
        function render_func(field)
        {
            return function(cb)
            {
                field.pre_render(cb);
            };
        }
        for(var field_name in this.fields)
        {
            funcs.push(render_func(this.fields[field_name]));
        }
        async.parallel(funcs,function(err,results)
        {
            if(err)
                callback(err);
            else
                callback(null);
        });
    },
    render : function(res,options)
    {
        var self = this;
        options = options || {};
        function render_fields(fields)
        {
            for(var i=0; i<fields.length; i++)
            {
                var field_name = fields[i];
                if(typeof(field_name) == 'object')
                    render_fieldset(field_name);
                else
                {
                    if(field_name in self.fields)
                        self.fields[field_name].render_with_label(res);
                }
            }
        };
        function render_fieldset(fieldset)
        {
            if(!fieldset || !fieldset.fields || !fieldset.fields.length)
                return;
            if(fieldset['title'] && fieldset['title'] != '' && !options.hide_fieldsets)
                res.write('<div class="nf_fieldset">');
            var title = fieldset['title'] || '';
            if(title != '' && !options.hide_titles)
                res.write('<h2>' + title + '</h2>');
            res.write('<div>');
            var fields = fieldset.fields;
            if(fields)
                render_fields(fields);
            res.write('</div>');
            if(fieldset['title'] && fieldset['title'] != '' && !options.hide_fieldsets)
                res.write("</div>");
        };
        if(self.fieldsets)
        {
            render_fields(self.fieldsets[0].fields);
        }
        else
            render_fields(Object.keys(self.fields));
        if(_.indexOf(self.exclude,'id') == -1)
            res.write('<input type="hidden" id="document_id" name="_id" value="' + (self.instance.isNew ? '' : self.instance.id) + '" />');
    },
    to_html : function()
    {
        var self = this;
        return common.writer_to_string(function(res)
        {
            self.render(res);
        },36000);
    },
    render_str:function()
    {
        return this.to_html();
    },
    render_error : function(res,field_name)
    {
        this.fields[field_name].render_error(res);
    //    if(this.errors[field_name])
    //        res.write(this.errors[field_name] + '');
    }
});


var MongooseForm = exports.MongooseForm = BaseForm.extend({
    init: function(request,options,model)
    {
        options = options || {};
        this.model = model;
        options.instance = options.instance || new this.model();
        this._super(request,options);
    },
    get_fields : function()
    {
        this.fields = {};
        this.fieldsets = [];
        this.mongoose_fields_to_fieldsets(this.model.schema.paths,this.model.schema.tree,this.fields,this.fieldsets);
        this._super();
    },
    mongoose_fields_to_fieldsets: function(field_paths,field_tree,ref_fields,ref_fieldsets)
    {
        ref_fieldsets.push({title:'',fields:[]});
        for(var field in field_paths)
        {
            if(field == 'id' || field == '_id')
                continue;
            var parts = field.split('.');
            var form_field = this.mongoose_field_to_form_field(field_paths[field],parts[parts.length-1],field_tree);
            if(form_field)
                ref_fields[field] = form_field;
            else
                continue;
            var parent_fieldset = ref_fieldsets[0];
            for(var i=0; i<parts.length-1; i++)
            {
                var fieldset = null;
                for(var j=0; j<parent_fieldset.fields.length; j++)
                {
                    if(typeof(parent_fieldset.fields[j])=='object' && parent_fieldset.fields[j].title == parts[i])
                    {
                        fieldset = parent_fieldset.fields[j];
                    }
                }
                if(!fieldset)
                {
                    fieldset = {title:parts[i],fields:[]};
                    parent_fieldset.fields.push(fieldset);
                    //parent_fieldset.fieldsets = parent_fieldset.fieldsets || [];
                    //parent_fieldset.fieldsets.push(fieldset);
                }
                parent_fieldset = fieldset;
            }
            parent_fieldset.fields = parent_fieldset.fields || [];
            parent_fieldset.fields.push(field);
        }
    },
    mongoose_field_to_form_field: function(mongoose_field,name,tree)
    {
        if(_.indexOf(this.exclude,name) > -1)
            return null;
        if(mongoose_field.options.auto || ('editable' in mongoose_field.options && !mongoose_field.options.editable))
            return null;//new fields.ReadonlyField({});
        var is_required = mongoose_field.options.required ? true : false;
        var def = mongoose_field.options['default'];
        var validators = [];
        var options = {required:is_required,'default':def,validators:validators,label:name};
        if(mongoose_field.options.validate)
        {
            validators.push(function(value)
            {
                var result = mongoose_field.options.validate[0](value);
                return result ? true : mongoose_field.options.validate[1];
            });
        }
        if(mongoose_field.options.min != null)
        {
            var min = mongoose_field.options.min;
            validators.push(function(value)
            {
                if(value >= min)
                    return true;
                else
                    return 'value must be equal or greater than ' + min;
            });
            options.min = min;
        }
        if(mongoose_field.options.max != null)
        {
            var max = mongoose_field.options.max;
            validators.push(function(value)
            {
                if(value <= max)
                    return true;
                else
                    return 'value must be equal or lower than ' + max;
            });
            options.max = max;
        }
        if(mongoose_field.options.step != null)
        {
            var step = mongoose_field.options.step;
            validators.push(function(value){
                if(Math.round(value/step) == value/step)
                    return true;
                else
                    return 'value must be according to step ' + step;
            });
            options.step = step;
        }
        if(Array.isArray(mongoose_field.options.type))
        {
            var path_parts = mongoose_field.path.split('.');
            var inner_schema = tree;
            for(var j=0; j<path_parts.length; j++)
            {
                inner_schema = inner_schema[path_parts[j]];
            }
            if(Array.isArray(inner_schema))
                inner_schema = inner_schema[0];
            else
            {
                if(inner_schema && inner_schema.type && Array.isArray(inner_schema.type))
                    inner_schema = inner_schema.type[0];
            }
            var schema;
            if(inner_schema && (typeof(inner_schema) != 'object' || inner_schema.type))
            {
    //            return new fields.StringField(options);
            //inner_schema = {stam_lo_bemet:inner_schema};
                var single_field = {};
                for(var attr in inner_schema)
                    single_field[attr] = inner_schema[attr];
                for(var attr in  mongoose_field.options)
                    single_field[attr] = mongoose_field.options[attr];
                single_field['type'] = mongoose_field.options.type[0];
                schema = new mongoose.Schema({__self__:single_field});
            }
            else
            {
                if(mongoose_field.options.type[0].paths && mongoose_field.options.type[0].tree)
                    schema = mongoose_field.options.type[0];
                else
                    schema = new mongoose.Schema(mongoose_field.options.type[0]);
            }
            var list_fields = {};
            var list_fieldsets = [];
            this.mongoose_fields_to_fieldsets(schema.paths,schema.tree,list_fields,list_fieldsets);
            return new fields.ListField(options,list_fields,list_fieldsets);
        }
        if(mongoose_field.options.type.name == 'File')
        {
            return new fields.FileField(options);
        }
        if(mongoose_field.options.type.name == 'GeoPoint')
        {
            return new fields.GeoField(options);
        }
        if(mongoose_field.options.ref)
        {
            var model = Models[mongoose_field.options.ref];
            if(!model)
            {
                model = mongoose.model(mongoose_field.options.ref);
//                return new TypeError('Unknown model '+ mongoose.options.ref + ' have you used set_models with your mongoose models')
            }
            return new fields.RefField(options,model);
        }
        if(mongoose_field.options.enum)
        {
            return new fields.EnumField(options,mongoose_field.options.enum);
        }
        if(mongoose_field.options.type == Boolean)
            return new fields.BooleanField(options);
        if(mongoose_field.options.type.name == 'Integer')
        {
            options.step = options.step != null ? options.step : 1.0;
            return new fields.NumberField(options);
        }
        if(mongoose_field.options.type == Number)
            return new fields.NumberField(options);
        if(mongoose_field.options.type == Date)
            return new fields.DateField(options);
        if(mongoose_field.options.type.name == 'Text')
        {
            options.widget = widgets.TextAreaWidget;
            return new fields.StringField(options);
        }
        if(mongoose_field.instance && mongoose_field.instance == 'String')
            return new fields.StringField(options);
        return new fields.StringField(options);
    },
    get_value : function(field_name)
    {
        return (typeof(this.data[field_name]) == 'undefined' ||  this.data[field_name] == null) ? this.instance.get(field_name) : this.data[field_name];
    },
    actual_save : function(callback)
    {
        var self = this;
        for(var field_name in self.clean_values)
            self.instance.set(field_name,self.clean_values[field_name]);
        self.instance.save(function(err,object)
        {

           if(err)
           {
               if(err.errors)
                    self.errors = err.errors;
               callback({message:'failed'});
           }
           else
           {
               callback(null,object);
           }
        });
    }
});

var AdminForm = exports.AdminForm = MongooseForm.extend({
    init: function(request,options,model)
    {
        this._super(request,options,model);
        this.static['js'].push('/node-forms/js/jquery-ui-1.8.18.custom.min.js');
        this.static['css'].push('/node-forms/css/ui-lightness/jquery-ui-1.8.18.custom.css');
        this.static['css'].push('/node-forms/css/forms.css');
    }
});

